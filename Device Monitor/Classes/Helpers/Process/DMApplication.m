/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina - www.xs-labs.com
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
 
/* $Id$ */

/*!
 * @file        ...
 * @copyright   (c) 2012 - Jean-David Gadina - www.xs-labs.com
 * @abstract    ...
 */

#import "DMApplication.h"
#import "UIImage+DM.h"

@implementation DMApplication

@synthesize path  = _path;
@synthesize icon  = _icon;
@synthesize infos = _infos;

+ ( DMApplication * )applicationWithName: ( NSString * )name
{
    return [ [ [ DMApplication alloc ] initWithName: name ] autorelease ];
}

+ ( DMApplication * )applicationWithPath: ( NSString * )path
{
    return [ [ [ DMApplication alloc ] initWithPath: path ] autorelease ];
}

- ( id )initWithName: ( NSString * )name
{
    if( [ name isEqualToString: [ [ [ [ NSBundle mainBundle ] executablePath ] lastPathComponent ] stringByDeletingPathExtension ] ] )
    {
        return [ self initWithPath: [ [ NSBundle mainBundle ] bundlePath ] ];
    }
    
    return [ self initWithPath: [ NSString stringWithFormat: @"/Applications/%@.app", name ] ];
}

- ( id )initWithPath: ( NSString * )path
{
    NSDictionary * cfBundleIcons;
    NSDictionary * cfBundlePrimaryIcon;
    NSDictionary * cfBundleIconFiles;
    NSString     * cfBundleIconFile;
    UIImage      * image;
    UIImage      * icon;
    NSString     * iconPath;
    NSString     * iconPathRetina;
    
    if( ( self = [ self init ] ) )
    {
        if( [ [ NSFileManager defaultManager ] fileExistsAtPath: path ] == NO )
        {
            [ self release ];
            
            return nil;
        }
        
        _path  = [ path copy ];
        _infos = [ [ NSDictionary dictionaryWithContentsOfFile: [ _path stringByAppendingPathComponent: @"Info.plist" ] ] retain ];
        
        cfBundleIcons       = [ _infos objectForKey: @"CFBundleIcons" ];
        cfBundlePrimaryIcon = nil;
        cfBundleIconFiles   = nil;
        cfBundleIconFile    = [ _infos objectForKey: @"CFBundleIconFile" ];
        iconPath            = nil;
        iconPathRetina      = nil;
        
        if( cfBundleIcons != nil )
        {
            cfBundlePrimaryIcon = [ cfBundleIcons objectForKey: @"CFBundlePrimaryIcon" ];
            cfBundleIconFiles   = [ cfBundlePrimaryIcon objectForKey: @"CFBundleIconFiles" ];
        }
        else
        {
            cfBundleIconFiles = [ _infos objectForKey: @"CFBundleIconFiles" ];
        }
        
        if( cfBundleIconFiles != nil )
        {
            icon = nil;
            
            for( cfBundleIconFile in cfBundleIconFiles )
            {
                if( cfBundleIconFile.pathExtension.length == 0 )
                {
                    cfBundleIconFile = [ cfBundleIconFile stringByAppendingPathExtension: @"png" ];
                }
                
                if( [ [ NSFileManager defaultManager ] fileExistsAtPath: [ _path stringByAppendingPathComponent: cfBundleIconFile ] ] == NO )
                {
                    continue;
                }
                
                image = [ UIImage imageWithContentsOfFile: [ _path stringByAppendingPathComponent: cfBundleIconFile ] ];
                
                if( icon == nil || ( icon.size.width < image.size.width && image != nil ) )
                {
                    icon     = image;
                    iconPath = [ _path stringByAppendingPathComponent: cfBundleIconFile ];
                }
            }
        }
        else if( cfBundleIconFile != nil )
        {
            if( cfBundleIconFile.pathExtension.length == 0 )
            {
                cfBundleIconFile = [ cfBundleIconFile stringByAppendingPathExtension: @"png" ];
            }
            
            iconPath = [ _path stringByAppendingPathComponent: cfBundleIconFile ];
        }
        
        if( iconPath != nil )
        {
            iconPathRetina = [ [ [ iconPath stringByDeletingPathExtension ] stringByAppendingString: @"@2x" ] stringByAppendingPathExtension: @"png" ];
        }
        
        if( iconPathRetina != nil && [ [ NSFileManager defaultManager ] fileExistsAtPath: iconPathRetina ] == YES )
        {
            _icon = [ [ UIImage imageWithContentsOfFile: iconPathRetina ] retain ];
        }
        else if( iconPath != nil && [ [ NSFileManager defaultManager ] fileExistsAtPath: iconPath ] == YES )
        {
            _icon = [ [ UIImage imageWithContentsOfFile: iconPath ] retain ];
        }
    }
    
    return self;
}

@end
