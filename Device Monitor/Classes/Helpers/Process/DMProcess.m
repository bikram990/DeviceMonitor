/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina - www.xs-labs.com
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
 
/* $Id$ */

/*!
 * @file        ...
 * @copyright   (c) 2012 - Jean-David Gadina - www.xs-labs.com
 * @abstract    ...
 */

#import "DMProcess.h"
#import "DMProcess+Private.h"

#include <sys/sysctl.h>

@implementation DMProcess

@synthesize pid  = _pid;
@synthesize name = _name;
@synthesize icon = _icon;

+ ( NSArray * )runningProcesses
{
    int                 name[ 4 ];
    unsigned int        nameLength;
    size_t              size;
    int                 res;
    struct kinfo_proc * process;
    struct kinfo_proc * newProcess;
    ssize_t             numberOfProcesses;
    ssize_t             i;
    NSMutableArray    * processes;
    DMProcess         * p;
    
    processes = [ NSMutableArray arrayWithCapacity: 256 ];
    
    name[ 0 ]  = CTL_KERN;
    name[ 1 ]  = KERN_PROC;
    name[ 2 ]  = KERN_PROC_ALL;
    name[ 3 ]  = 0;
    nameLength = 4;
    size       = 0;
    
    sysctl( name, nameLength, NULL, &size, NULL, 0 );
    
    process     = NULL;
    newProcess  = NULL;
    
    do
    {
        size      += size / 10;
        newProcess = realloc( process, size );
        
        if( newProcess == NULL )
        {
            if( process != NULL )
            {
                free( process );
            }
            
            return nil;
        }
        
        process = newProcess;
        res     = sysctl( name, nameLength, process, &size, NULL, 0 );
    }
    while( res == -1 && errno == ENOMEM );
    
    if( res == 0 )
    {
        if( size % sizeof( struct kinfo_proc ) == 0 )
        {
            numberOfProcesses = size / sizeof( struct kinfo_proc );
            
            if( numberOfProcesses > 0 )
            {
                for ( i = numberOfProcesses - 1; i >= 0; i-- )
                {
                    p = [ [ DMProcess alloc ] initWithKInfoProc: &( process[ i ] ) ];
                    
                    if( p != nil )
                    {
                        [ processes addObject: p ];
                    }
                    
                    [ p release ];
                }
                
                free( process );
            }
        }
    }
    
    return [ NSArray arrayWithArray: processes ];
}

@end
